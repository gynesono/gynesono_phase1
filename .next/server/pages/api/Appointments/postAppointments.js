"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/Appointments/postAppointments";
exports.ids = ["pages/api/Appointments/postAppointments"];
exports.modules = {

/***/ "aws-sdk":
/*!**************************!*\
  !*** external "aws-sdk" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("aws-sdk");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "(api)/./src/pages/api/Appointments/postAppointments.js":
/*!********************************************************!*\
  !*** ./src/pages/api/Appointments/postAppointments.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/**\r\n * Copyright 2022 GyneSono Technologies or its affiliates. All Rights Reserved.\r\n *\r\n * This file is licensed under the Apache License, Version 2.0 (the \"License\").\r\n * You may not use this file except in compliance with the License. A copy of\r\n * the License is located at\r\n *\r\n * \r\n *\r\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the\r\n * specific language governing permissions and limitations under the License.\r\n*/ function handler(req, res1) {\n    var AWS = __webpack_require__(/*! aws-sdk */ \"aws-sdk\");\n    AWS.config.update({\n        region: 'us-west-1',\n        accessKeyId: 'accessKeyId',\n        secretAccessKey: 'secretAccessKey',\n        endpoint: new AWS.Endpoint('http://localhost:8000')\n    });\n    var docClient = new AWS.DynamoDB.DocumentClient();\n    var tableName = \"Appointments\";\n    var customerCategory = req.body.customerCategory;\n    var customer_id = req.body.customerID;\n    var appointmentID = 1;\n    var date = req.body.date;\n    var time = req.body.time;\n    var dateTime = date + time;\n    var patientFirstName = req.body.patientFirstName;\n    var patientLastName = req.body.patientLastName;\n    var patientMobileNumber = req.body.patientMobileNumber;\n    var appointmentRemarks = req.body.appointmentRemarks;\n    var appointmentStatus = req.body.appointmentStatus;\n    var returnMessage = \"\";\n    var http = __webpack_require__(/*! http */ \"http\");\n    var data1 = {\n        counterName: tableName,\n        customerID: customer_id\n    };\n    var dataString = JSON.stringify(data1);\n    var postheaders = {\n        'Content-Type': 'application/json',\n        'Content-Length': dataString.length\n    };\n    var post_requst = {\n        host: \"localhost\",\n        port: \"3000\",\n        path: \"/api/Utils/getCounterValue\",\n        method: \"POST\",\n        headers: postheaders\n    };\n    console.log(\"calling the request\");\n    var reqPost = http.request(post_requst, function(res) {\n        console.log(\"statusCode: \", res.statusCode);\n        res.on('data', function(d) {\n            console.info('POST result:\\n');\n            process.stdout.write(d);\n            console.log(\"Body--\", JSON.parse(d));\n            JSON.parse(d).Items.forEach(function(item) {\n                //name: 'John Doe'\n                appointmentID = parseInt(item.counter_value);\n                console.log(\"counter_value:\", appointmentID + 1);\n                appointmentID = appointmentID + 1;\n                console.log(\"Appointment ID\", appointmentID);\n                var params = {\n                    TableName: tableName,\n                    Item: {\n                        \"appointment_id\": appointmentID,\n                        \"customer_id\": customer_id,\n                        \"appointment_date\": date,\n                        \"appointment_time\": time,\n                        \"customer_category\": customerCategory,\n                        \"appointment_status\": appointmentStatus,\n                        \"patient_details\": {\n                            \"patient_first_name\": patientFirstName,\n                            \"patient_last_name\": patientLastName,\n                            \"patient_contact_no\": patientMobileNumber,\n                            \"patient_appointment_remarks\": appointmentRemarks\n                        }\n                    }\n                };\n                try {\n                    console.log(\"Adding a new appoitnment...\");\n                    docClient.put(params, function(err, data) {\n                        if (err) {\n                            console.error(\"Unable to add appointment. Error JSON:\", JSON.stringify(err, null, 2));\n                        } else {\n                            console.log(\"Added item:\", JSON.stringify(data, null, 2));\n                            returnMessage = JSON.stringify(data, null, 2);\n                        }\n                    });\n                } catch (err) {\n                    console.log(\"Error: \", err);\n                }\n            });\n            console.info('\\n\\nPOST completed');\n        });\n    });\n    console.log(\"after the request---\");\n    reqPost.write(dataString);\n    reqPost.end();\n    reqPost.on('error', function(e) {\n        console.error(e);\n    });\n    res1.status(200).json(\"Added Appointment: \" + returnMessage);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL0FwcG9pbnRtZW50cy9wb3N0QXBwb2ludG1lbnRzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxFQVlFO0lBR0UsR0FBRyxDQUFDRyxHQUFHLEdBQUdDLE9BQU8sQ0FBQyxDQUFTOztRQUd2QkcsTUFBTSxFQUFFLENBQVc7UUFDbkJDLFdBQVcsRUFBRSxDQUFhO1FBQzFCQyxlQUFlLEVBQUUsQ0FBaUI7O0lBRXRDOztJQUdBLEdBQUcsQ0FBQ00sU0FBUyxHQUFHLENBQWM7SUFFOUIsR0FBRyxDQUFDQyxnQkFBZ0IsR0FBR2YsR0FBRyxDQUFDZ0IsSUFBSSxDQUFDRCxnQkFBZ0I7SUFDaEQsR0FBRyxDQUFDRSxXQUFXLEdBQUdqQixHQUFHLENBQUNnQixJQUFJLENBQUNFLFVBQVU7R0FDakNDLEdBQWEsR0FBRyxDQUFDO0lBQ3JCLEdBQUcsQ0FBQ0MsSUFBSSxxQkFBT0osQ0FBQUEsd0JBQVM7SUFDeEIsR0FBRyxDQUFDSyxJQUFJLEdBQUdyQixHQUFHLENBQUNnQixJQUFJO0lBQ25CLEdBQUcsQ0FBQ00sUUFBUSxHQUFHRixJQUFJLEdBQUdDO0lBQ3RCLEdBQUcsQ0FBQ0UsZ0JBQWdCLEdBQUd2QixHQUFHLENBQUNnQixJQUFJO0lBQy9CLEdBQUcsQ0FBQ1EsZUFBZSxHQUFHeEIsR0FBRyxDQUFDZ0IsSUFBSSxDQUFDUTtJQUMvQixHQUFHLENBQUNDLG1CQUFtQixHQUFHekIsR0FBRyxDQUFDZ0IsSUFBSSxDQUFDUyxtQkFBbUI7SUFDdEQsR0FBRztJQUNILEdBQUcsQ0FBQ0UsaUJBQWlCLEdBQUczQixHQUFHLENBQUNnQixJQUFJLENBQUNXLGlCQUFpQjtJQUNsRCxHQUFHLENBQUNDLGFBQWEsR0FBRyxDQUFFO0lBQ3RCLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHMUIsT0FBTyxDQUFDLENBQU07SUFFekIsR0FBRyxDQUFDMkIsS0FBSSxHQUFHLENBQUM7UUFDUkMsV0FBVyxFQUFFakI7UUFDYkksVUFBVSxFQUFFRDtJQUNoQixDQUFDO0lBRUQsR0FBRyxDQUFDZSxVQUFVLEdBQUdDLElBQUksQ0FBQ0M7SUFDdEIsR0FBRyxDQUFDQyxXQUFXLEdBQUcsQ0FBQztRQUNmLENBQWMsZUFBRSxDQUFrQjtRQUNsQyxDQUFnQixpQkFBRUgsVUFBVSxDQUFDSSxNQUFNO0lBQ3ZDLENBQUM7SUFDRCxHQUFHLENBQUNDLFdBQVcsR0FBRyxDQUFDO1FBQ2ZDLElBQUksRUFBRSxDQUFXO1FBQ2pCQyxJQUFJLEVBQUUsQ0FBTTtRQUNaQyxJQUFJLEVBQUUsQ0FBNEI7UUFDbENDLE1BQU0sRUFBRSxDQUFNO1FBQ2RDLE9BQU8sRUFBRVAsV0FBVztJQUN4QixDQUFDO0lBQ0RRLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLENBQXFCO0lBQ2pDLEdBQUcsQ0FBQ0MsT0FBTyxHQUFHaEIsSUFBSSxDQUFDaUI7UUFDZkgsT0FBTyxDQUFDQyxHQUFHLENBQUMsQ0FBYyxlQUFFM0MsR0FBRyxDQUFDOEM7UUFDaEM5QyxHQUFHLENBQUMrQyxFQUFFLENBQUMsQ0FBTSxPQUFFLFFBQVEsQ0FBRUMsQ0FBQyxFQUFFLENBQUM7O1lBRXpCRSxPQUFPLENBQUNDO1lBRVJULE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLENBQVE7WUFDcEJYLElBQUksQ0FBQ3FCO2dCQUNELEVBQWtCO2dCQUNsQm5DO2dCQUVBd0IsT0FBTyxDQUFDQyxHQUFHLENBQUM7O2dCQUVaRCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxDQUFnQjtnQkFDNUIsR0FBRyxDQUFDZ0IsTUFBTSxHQUFHLENBQUM7b0JBQ1ZDLFNBQVMsRUFBRS9DLFNBQVM7b0JBQ3BCZ0QsSUFBSSxFQUFFLENBQUM7d0JBQ0gsQ0FBZ0IsaUJBQUUzQzt3QkFDbEIsQ0FBYTt3QkFDYixDQUFrQixtQkFBRUMsSUFBSTt3QkFDeEIsQ0FBa0IsbUJBQUVDLElBQUk7d0JBQ3hCLENBQW1CO3dCQUNuQixDQUFvQixxQkFBRU07d0JBQ3RCLENBQWlCLGtCQUFFLENBQUM7NEJBQ2hCLENBQW9CLHFCQUFFSjs0QkFDdEIsQ0FBbUIsb0JBQUVDOzRCQUNyQixDQUFvQjs0QkFDcEIsQ0FBNkI7d0JBQ2pDLENBQUM7b0JBQ0wsQ0FBQztnQkFDTCxDQUFDO2dCQUVELEdBQUcsQ0FBQyxDQUFDO29CQUNEbUIsT0FBTyxDQUFDQyxHQUFHLENBQUMsQ0FBNkI7b0JBQ3pDakMsU0FBUyxDQUFDb0QsR0FBRyxDQUFDSCxNQUFNLEVBQUUsUUFBUSxDQUFFSSxHQUFHLEVBQUVsQyxJQUFJLEVBQUU7d0JBQ3ZDLEVBQUUsRUFBRWtDLEdBQUcsRUFBRSxDQUFDOzRCQUNOckIsT0FBTyxDQUFDc0IsS0FBSyxDQUFDLENBQXdDO3dCQUMxRCxDQUFDLE1BQU0sQ0FBQzs0QkFDSnRCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLENBQWEsY0FBRVgsSUFBSSxDQUFDQzs0QkFDaENOLGFBQWEsR0FBR0ssSUFBSSxDQUFDQyxTQUFTLENBQUNKLElBQUksRUFBRSxJQUFJO3dCQUU3QyxDQUFDO29CQUNMLENBQUM7Z0JBRUwsQ0FBQyxDQUFDOztnQkFFRixDQUFDO1lBRUwsQ0FBQztZQUNEYSxPQUFPLENBQUNPLElBQUksQ0FBQyxDQUFvQjtRQUNyQyxDQUFDO0lBQ0wsQ0FBQztJQUdEUCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxDQUFzQjtJQUNsQ0MsT0FBTyxDQUFDUSxLQUFLLENBQUNyQixVQUFVO0lBQ3hCYSxPQUFPLENBQUNxQixHQUFHO0lBRVhyQixPQUFPLENBQUNHLEVBQUUsQ0FBQyxDQUFPLFFBQUU7UUFDaEJMLE9BQU8sQ0FBQ3NCLEtBQUssQ0FBQ0UsQ0FBQztJQUNuQixDQUFDO0lBRURsRSxJQUFHLENBQUNtRSxNQUFNLENBQUMsR0FBRyxFQUFFQyxJQUFJLENBQUMsQ0FBcUI7QUFNOUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2d5bmVzb25vcGhhc2UyLy4vc3JjL3BhZ2VzL2FwaS9BcHBvaW50bWVudHMvcG9zdEFwcG9pbnRtZW50cy5qcz82ODdkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAyMiBHeW5lU29ubyBUZWNobm9sb2dpZXMgb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxyXG4gKiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIEEgY29weSBvZlxyXG4gKiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XHJcbiAqXHJcbiAqIFxyXG4gKlxyXG4gKiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1JcclxuICogQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcclxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZXIocmVxLCByZXMpIHtcclxuICAgIHZhciBBV1MgPSByZXF1aXJlKFwiYXdzLXNka1wiKTtcclxuXHJcbiAgICBBV1MuY29uZmlnLnVwZGF0ZSh7XHJcbiAgICAgICAgcmVnaW9uOiAndXMtd2VzdC0xJyxcclxuICAgICAgICBhY2Nlc3NLZXlJZDogJ2FjY2Vzc0tleUlkJyxcclxuICAgICAgICBzZWNyZXRBY2Nlc3NLZXk6ICdzZWNyZXRBY2Nlc3NLZXknLFxyXG4gICAgICAgIGVuZHBvaW50OiBuZXcgQVdTLkVuZHBvaW50KCdodHRwOi8vbG9jYWxob3N0OjgwMDAnKSxcclxuICAgIH0pO1xyXG5cclxuICAgIHZhciBkb2NDbGllbnQgPSBuZXcgQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50KCk7XHJcbiAgICB2YXIgdGFibGVOYW1lID0gXCJBcHBvaW50bWVudHNcIjtcclxuXHJcbiAgICB2YXIgY3VzdG9tZXJDYXRlZ29yeSA9IHJlcS5ib2R5LmN1c3RvbWVyQ2F0ZWdvcnk7XHJcbiAgICB2YXIgY3VzdG9tZXJfaWQgPSByZXEuYm9keS5jdXN0b21lcklEO1xyXG4gICAgdmFyIGFwcG9pbnRtZW50SUQgPSAxO1xyXG4gICAgdmFyIGRhdGUgPSByZXEuYm9keS5kYXRlO1xyXG4gICAgdmFyIHRpbWUgPSByZXEuYm9keS50aW1lO1xyXG4gICAgdmFyIGRhdGVUaW1lID0gZGF0ZSArIHRpbWU7IFxyXG4gICAgdmFyIHBhdGllbnRGaXJzdE5hbWUgPSByZXEuYm9keS5wYXRpZW50Rmlyc3ROYW1lOyBcclxuICAgIHZhciBwYXRpZW50TGFzdE5hbWUgPSByZXEuYm9keS5wYXRpZW50TGFzdE5hbWU7IFxyXG4gICAgdmFyIHBhdGllbnRNb2JpbGVOdW1iZXIgPSByZXEuYm9keS5wYXRpZW50TW9iaWxlTnVtYmVyOyBcclxuICAgIHZhciBhcHBvaW50bWVudFJlbWFya3MgPSByZXEuYm9keS5hcHBvaW50bWVudFJlbWFya3M7XHJcbiAgICB2YXIgYXBwb2ludG1lbnRTdGF0dXMgPSByZXEuYm9keS5hcHBvaW50bWVudFN0YXR1cztcclxuICAgIHZhciByZXR1cm5NZXNzYWdlID0gXCJcIjtcclxuICAgIHZhciBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xyXG5cclxuICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgIGNvdW50ZXJOYW1lOiB0YWJsZU5hbWUsXHJcbiAgICAgICAgY3VzdG9tZXJJRDogY3VzdG9tZXJfaWRcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGRhdGFTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcclxuICAgIHZhciBwb3N0aGVhZGVycyA9IHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICdDb250ZW50LUxlbmd0aCc6IGRhdGFTdHJpbmcubGVuZ3RoXHJcbiAgICB9O1xyXG4gICAgdmFyIHBvc3RfcmVxdXN0ID0ge1xyXG4gICAgICAgIGhvc3Q6IFwibG9jYWxob3N0XCIsXHJcbiAgICAgICAgcG9ydDogXCIzMDAwXCIsXHJcbiAgICAgICAgcGF0aDogXCIvYXBpL1V0aWxzL2dldENvdW50ZXJWYWx1ZVwiLFxyXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgaGVhZGVyczogcG9zdGhlYWRlcnNcclxuICAgIH07XHJcbiAgICBjb25zb2xlLmxvZyhcImNhbGxpbmcgdGhlIHJlcXVlc3RcIik7XHJcbiAgICB2YXIgcmVxUG9zdCA9IGh0dHAucmVxdWVzdChwb3N0X3JlcXVzdCwgZnVuY3Rpb24gKHJlcykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwic3RhdHVzQ29kZTogXCIsIHJlcy5zdGF0dXNDb2RlKTtcclxuICAgICAgICByZXMub24oJ2RhdGEnLCBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ1BPU1QgcmVzdWx0OlxcbicpO1xyXG4gICAgICAgICAgICBwcm9jZXNzLnN0ZG91dC53cml0ZShkKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQm9keS0tXCIsIEpTT04ucGFyc2UoZCkpO1xyXG4gICAgICAgICAgICBKU09OLnBhcnNlKGQpLkl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIC8vbmFtZTogJ0pvaG4gRG9lJ1xyXG4gICAgICAgICAgICAgICAgYXBwb2ludG1lbnRJRCA9IHBhcnNlSW50KGl0ZW0uY291bnRlcl92YWx1ZSk7IFxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY291bnRlcl92YWx1ZTpcIiwgYXBwb2ludG1lbnRJRCArIDEpO1xyXG4gICAgICAgICAgICAgICAgYXBwb2ludG1lbnRJRCA9IGFwcG9pbnRtZW50SUQgKyAxO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBcHBvaW50bWVudCBJRFwiLCBhcHBvaW50bWVudElEKTtcclxuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgVGFibGVOYW1lOiB0YWJsZU5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgSXRlbToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFwcG9pbnRtZW50X2lkXCI6IGFwcG9pbnRtZW50SUQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY3VzdG9tZXJfaWRcIjogY3VzdG9tZXJfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYXBwb2ludG1lbnRfZGF0ZVwiOiBkYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFwcG9pbnRtZW50X3RpbWVcIjogdGltZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjdXN0b21lcl9jYXRlZ29yeVwiOiBjdXN0b21lckNhdGVnb3J5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFwcG9pbnRtZW50X3N0YXR1c1wiOiBhcHBvaW50bWVudFN0YXR1cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJwYXRpZW50X2RldGFpbHNcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwYXRpZW50X2ZpcnN0X25hbWVcIjogcGF0aWVudEZpcnN0TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGF0aWVudF9sYXN0X25hbWVcIjogcGF0aWVudExhc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwYXRpZW50X2NvbnRhY3Rfbm9cIjogcGF0aWVudE1vYmlsZU51bWJlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGF0aWVudF9hcHBvaW50bWVudF9yZW1hcmtzXCI6IGFwcG9pbnRtZW50UmVtYXJrc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQWRkaW5nIGEgbmV3IGFwcG9pdG5tZW50Li4uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRvY0NsaWVudC5wdXQocGFyYW1zLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gYWRkIGFwcG9pbnRtZW50LiBFcnJvciBKU09OOlwiLCBKU09OLnN0cmluZ2lmeShlcnIsIG51bGwsIDIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQWRkZWQgaXRlbTpcIiwgSlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgMikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuTWVzc2FnZSA9IEpTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3I6IFwiLCBlcnIpXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdcXG5cXG5QT1NUIGNvbXBsZXRlZCcpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIGNvbnNvbGUubG9nKFwiYWZ0ZXIgdGhlIHJlcXVlc3QtLS1cIik7XHJcbiAgICByZXFQb3N0LndyaXRlKGRhdGFTdHJpbmcpO1xyXG4gICAgcmVxUG9zdC5lbmQoKTtcclxuICAgXHJcbiAgICByZXFQb3N0Lm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgIH0pO1xyXG4gIFxyXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24oXCJBZGRlZCBBcHBvaW50bWVudDogXCIgKyByZXR1cm5NZXNzYWdlKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG59Il0sIm5hbWVzIjpbImhhbmRsZXIiLCJyZXEiLCJyZXMiLCJBV1MiLCJyZXF1aXJlIiwiY29uZmlnIiwidXBkYXRlIiwicmVnaW9uIiwiYWNjZXNzS2V5SWQiLCJzZWNyZXRBY2Nlc3NLZXkiLCJlbmRwb2ludCIsIkVuZHBvaW50IiwiZG9jQ2xpZW50IiwiRHluYW1vREIiLCJEb2N1bWVudENsaWVudCIsInRhYmxlTmFtZSIsImN1c3RvbWVyQ2F0ZWdvcnkiLCJib2R5IiwiY3VzdG9tZXJfaWQiLCJjdXN0b21lcklEIiwiYXBwb2ludG1lbnRJRCIsImRhdGUiLCJ0aW1lIiwiZGF0ZVRpbWUiLCJwYXRpZW50Rmlyc3ROYW1lIiwicGF0aWVudExhc3ROYW1lIiwicGF0aWVudE1vYmlsZU51bWJlciIsImFwcG9pbnRtZW50UmVtYXJrcyIsImFwcG9pbnRtZW50U3RhdHVzIiwicmV0dXJuTWVzc2FnZSIsImh0dHAiLCJkYXRhIiwiY291bnRlck5hbWUiLCJkYXRhU3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsInBvc3RoZWFkZXJzIiwibGVuZ3RoIiwicG9zdF9yZXF1c3QiLCJob3N0IiwicG9ydCIsInBhdGgiLCJtZXRob2QiLCJoZWFkZXJzIiwiY29uc29sZSIsImxvZyIsInJlcVBvc3QiLCJyZXF1ZXN0Iiwic3RhdHVzQ29kZSIsIm9uIiwiZCIsImluZm8iLCJwcm9jZXNzIiwic3Rkb3V0Iiwid3JpdGUiLCJwYXJzZSIsIkl0ZW1zIiwiZm9yRWFjaCIsIml0ZW0iLCJwYXJzZUludCIsImNvdW50ZXJfdmFsdWUiLCJwYXJhbXMiLCJUYWJsZU5hbWUiLCJJdGVtIiwicHV0IiwiZXJyIiwiZXJyb3IiLCJlbmQiLCJlIiwic3RhdHVzIiwianNvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/Appointments/postAppointments.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./src/pages/api/Appointments/postAppointments.js"));
module.exports = __webpack_exports__;

})();